#ifndef VISUALIZATION_OPENGL_INTERFACE_OPENGL_BUFFER_OBJECT_PARAMETERS_H
#define VISUALIZATION_OPENGL_INTERFACE_OPENGL_BUFFER_OBJECT_PARAMETERS_H

#include <GL/gl.h> // GLuint
#include <array>
#include <cstddef> // std::size_t

namespace Visualization
{
namespace OpenGLInterface
{

struct OpenGLBufferObjectParameters
{
  OpenGLBufferObjectParameters(
    const std::size_t number_of_buffer_object_names,
    const GLenum binding_target,
    const GLenum usage,
    const std::size_t width,
    const std::size_t height);

  OpenGLBufferObjectParameters();

  //------------------------------------------------------------------------
  /// \ref https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBufferData.xhtml
  /// \ref https://www.khronos.org/opengl/wiki/OpenGL_Type
  /// GLsizeiptr, Bitdepth ptrbits 1, Non-negative binary integer size, for
  /// memory offsets and ranges.
  //------------------------------------------------------------------------
  inline GLsizeiptr calculate_new_data_store_size() const
  {
    return width_ * height_ * sizeof(GLubyte) * 4;        
  }

  // TODO: Continue to document all possible valid enum values with links to
  // documentation for OpenGL.
  // See https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindBuffer.xhtml
  static std::array<GLenum, 9> valid_targets_;
  // See https://registry.khronos.org/OpenGL-Refpages/gl2.1/xhtml/glBufferData.xml
  static std::array<GLenum, 10> valid_usage_;

  //--------------------------------------------------------------------------
  /// \href https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGenBuffers.xhtml
  /// Specifies number of buffer object names to be generated by
  /// glGenBuffers(..)
  //--------------------------------------------------------------------------
  std::size_t number_of_buffer_object_names_;

  //--------------------------------------------------------------------------
  /// \href https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindBuffer.xhtml
  /// \brief Used in void glBindBuffer(..), specifies target to which buffer
  /// object is bound, which must be 1 of the buffer binding targets in the
  /// table:
  /// Buffer Binding Target, Purpose
  /// GL_ARRAY_BUFFER - Vertex attributes
  /// GL_ELEMENT_ARRAY_BUFFER - Vertex array indices
  /// GL_PIXEL_PACK_BUFFER - Pixel read target
  /// GL_PIXEL_UNPACK_BUFFER - Texture data source
  /// GL_TEXTURE_BUFFER - Texture data buffer
  //--------------------------------------------------------------------------
  GLenum binding_target_;

  //--------------------------------------------------------------------------
  /// \href https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBufferData.xhtml
  /// \brief Specifies expected usage pattern of data store, used in
  /// glBufferData, glNamedBufferData.
  /// Symbolic constant must be
  /// GL_STREAM_DRAW,
  /// GL_STREAM_READ,
  /// GL_STREAM_COPY,
  /// GL_STATIC_DRAW,
  /// GL_STATIC_READ,
  /// GL_STATIC_COPY,
  /// GL_DYNAMIC_DRAW,
  /// GL_DYNAMIC_READ,
  /// GL_DYNAMIC_COPY
  ///
  /// Frequency of access may be one of these:
  /// STREAM - data store contents will be modified once and used at most a
  /// few times.
  /// DYNAMIC - data store contents will be modified repeatedly and used many
  /// times.
  /// The nature of access may be:
  /// DRAW - data store contents modified by application, and used as source
  /// for GL drawing and image specification commands.
  /// READ - data store contents modified by reading data from GL, and used to
  /// return data when queried by application.
  //--------------------------------------------------------------------------
  GLenum usage_;

  std::size_t width_;
  std::size_t height_;
};

} // namespace OpenGLInterface
} // namespace Visualization

#endif // VISUALIZATION_OPENGL_INTERFACE_OPENGL_BUFFER_OBJECT_PARAMETERS_H
