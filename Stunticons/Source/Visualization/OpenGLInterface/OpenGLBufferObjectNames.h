#ifndef VISUALIZATION_OPENGL_INTERFACE_OPENGL_BUFFER_OBJECT_NAMES_H
#define VISUALIZATION_OPENGL_INTERFACE_OPENGL_BUFFER_OBJECT_NAMES_H

// needed for identifier glGenBuffer, glBindBuffer, glBufferData, glDeleteBuffers
#define GL_GLEXT_PROTOTYPES 

#include <GL/gl.h> // GLuint
#include <cstddef> // std::size_t

namespace Visualization
{
namespace OpenGLInterface
{

struct OpenGLBufferObjectNames
{
  struct Parameters
  {
    Parameters(
      const std::size_t number_of_buffer_object_names,
      const GLenum binding_target);

    Parameters();

    //--------------------------------------------------------------------------
    /// \href https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGenBuffers.xhtml
    /// Specifies number of buffer object names to be generated by
    /// glGenBuffers(..)
    //--------------------------------------------------------------------------
    std::size_t number_of_buffer_object_names_;

    //--------------------------------------------------------------------------
    /// \href https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindBuffer.xhtml
    /// \brief Used in void glBindBuffer(..), specifies target to which buffer
    /// object is bound, which must be 1 of the buffer binding targets in the
    /// table:
    /// Buffer Binding Target, Purpose
    /// GL_ARRAY_BUFFER - Vertex attributes
    /// GL_PIXEL_PACK_BUFFER - Pixel read target
    /// GL_PIXEL_UNPACK_BUFFER - Texture data source
    /// GL_TEXTURE_BUFFER - Texture data buffer
    //--------------------------------------------------------------------------
    GLenum binding_target_;
  };

  OpenGLBufferObjectNames(const Parameters& parameters);

  virtual ~OpenGLBufferObjectNames();

  void initialize();

  const Parameters parameters_;
  GLuint* buffer_object_;
};

} // namespace OpenGLInterface
} // namespace Visualization

#endif // VISUALIZATION_OPENGL_INTERFACE_OPENGL_BUFFER_OBJECT_NAMES_H
